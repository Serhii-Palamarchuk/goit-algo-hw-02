# Завдання 3 (необов'язкове завдання)
# Напишіть програму, яка читає рядок з послідовністю символів-розділювачів, наприклад, ( ) { [ ] ( ) ( ) { } } }, 
# і надає відповідне повідомлення, коли розділювачі симетричні, несиметричні, наприклад ( ( ( ) , або коли розділювачі різних видів стоять у парі, як-от ( }.

# Функція для перевірки, чи є дужки симетричними
def are_brackets_balanced(expression):
    # Словник для відповідних пар дужок
    brackets_pairs = {')': '(', '}': '{', ']': '['}
    
    # Стек для відкритих дужок
    stack = []

    for char in expression:
        if char in brackets_pairs.values():  # Якщо це відкрита дужка
            stack.append(char)
        elif char in brackets_pairs.keys():  # Якщо це закрита дужка
            if stack and stack[-1] == brackets_pairs[char]:  # Перевірка, чи відповідає закрита дужка останній відкритій
                stack.pop()  # Витягуємо з стека відповідну відкриту дужку
            else:
                return "Несиметрично"  # Якщо немає відповідної пари
    return "Симетрично" if not stack else "Несиметрично"  # Перевіряємо, чи всі дужки закриті

# Тестування функції
test_expressions = [
    "( ){[ 1 ]( 1 + 3 )( ){ }}",  # Симетрично
    "( 23 ( 2 - 3);",             # Несиметрично
    "( 11 }",                     # Несиметрично
    "{[()]}",                     # Симетрично
    "((()))",                     # Симетрично
    "[{( ) }]",                   # Симетрично
    "[{]}",                       # Несиметрично
    "([)]",                       # Несиметрично
    "( ){[ 1 ]( 1 + 3 )( ){ }}",  # Симетрично
    "( 23 ( 2 - 3);",             # Несиметрично
    "( 11 }"                      # Несиметрично
    ]

for expr in test_expressions:
    result = are_brackets_balanced(expr)
    print(f"'{expr}': {result}")
